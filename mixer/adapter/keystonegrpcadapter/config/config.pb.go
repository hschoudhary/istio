// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/keystonegrpcadapter/config/config.proto

// config for keystonegrpcadapter

package config

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// config for keystonegrpcadapter
type Params struct {
	// Apikey to send data to keystone via a API Key information about runtime requests.
	ApiKey             string `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	HttpRequestTimeout int64  `protobuf:"varint,2,opt,name=httpRequestTimeout,proto3" json:"httpRequestTimeout,omitempty"`
	BufferSize         int64  `protobuf:"varint,3,opt,name=bufferSize,proto3" json:"bufferSize,omitempty"`
	SampleRate         int64  `protobuf:"varint,4,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_067ce30ea4944b71, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *Params) GetHttpRequestTimeout() int64 {
	if m != nil {
		return m.HttpRequestTimeout
	}
	return 0
}

func (m *Params) GetBufferSize() int64 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

func (m *Params) GetSampleRate() int64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "adapter.keystonegrpcadapter.config.Params")
}

func init() {
	proto.RegisterFile("mixer/adapter/keystonegrpcadapter/config/config.proto", fileDescriptor_067ce30ea4944b71)
}

var fileDescriptor_067ce30ea4944b71 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0xfd, 0x28, 0x8a, 0x84, 0x47, 0x0b, 0xa1, 0x88, 0xe1, 0xa9, 0xea, 0xd4, 0x29, 0x19,
	0x10, 0x1b, 0x13, 0x2b, 0x0b, 0x0a, 0x4c, 0x6c, 0x6e, 0x79, 0x09, 0x16, 0xa4, 0x36, 0x8e, 0x23,
	0x51, 0x26, 0x3e, 0xa1, 0x9f, 0xc1, 0xa7, 0x30, 0x66, 0xec, 0x48, 0x9c, 0x85, 0xb1, 0x9f, 0x80,
	0x1a, 0x07, 0xd1, 0x21, 0x93, 0xfd, 0xee, 0x39, 0x77, 0xb8, 0xfc, 0xb2, 0x54, 0x6f, 0x64, 0x53,
	0xf9, 0x28, 0x8d, 0x23, 0x9b, 0x3e, 0xd3, 0xba, 0x72, 0x7a, 0x45, 0x85, 0x35, 0xcb, 0xbf, 0x6c,
	0xa9, 0x57, 0xb9, 0x2a, 0x86, 0x27, 0x31, 0x56, 0x3b, 0x2d, 0x66, 0x03, 0x4c, 0x46, 0x0a, 0x49,
	0x30, 0xcf, 0x4f, 0x0b, 0x5d, 0xe8, 0x5e, 0x4f, 0xf7, 0xbf, 0xd0, 0x9c, 0x6d, 0x80, 0x47, 0xb7,
	0xd2, 0xca, 0xb2, 0x12, 0x67, 0x3c, 0x92, 0x46, 0xdd, 0xd0, 0x3a, 0x86, 0x29, 0xcc, 0x4f, 0xb2,
	0xe1, 0x12, 0x09, 0x17, 0x4f, 0xce, 0x99, 0x8c, 0x5e, 0x6b, 0xaa, 0xdc, 0xbd, 0x2a, 0x49, 0xd7,
	0x2e, 0x3e, 0x9a, 0xc2, 0x7c, 0x92, 0x8d, 0x10, 0x81, 0x9c, 0x2f, 0xea, 0x3c, 0x27, 0x7b, 0xa7,
	0xde, 0x29, 0x9e, 0xf4, 0xde, 0x41, 0xb2, 0xe7, 0x95, 0x2c, 0xcd, 0x0b, 0x65, 0xd2, 0x51, 0x7c,
	0x1c, 0xf8, 0x7f, 0x72, 0x7d, 0xd5, 0xb4, 0xc8, 0xb6, 0x2d, 0xb2, 0x5d, 0x8b, 0xf0, 0xe1, 0x11,
	0x3e, 0x3d, 0xc2, 0x97, 0x47, 0x68, 0x3c, 0xc2, 0xb7, 0x47, 0xf8, 0xf1, 0xc8, 0x76, 0x1e, 0x61,
	0xd3, 0x21, 0x6b, 0x3a, 0x64, 0xdb, 0x0e, 0xd9, 0x43, 0x14, 0x66, 0x2e, 0xa2, 0x7e, 0xd7, 0xc5,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xd9, 0xdc, 0x6c, 0x4a, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if this.HttpRequestTimeout != that1.HttpRequestTimeout {
		return false
	}
	if this.BufferSize != that1.BufferSize {
		return false
	}
	if this.SampleRate != that1.SampleRate {
		return false
	}
	return true
}
func (this *Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&config.Params{")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "HttpRequestTimeout: "+fmt.Sprintf("%#v", this.HttpRequestTimeout)+",\n")
	s = append(s, "BufferSize: "+fmt.Sprintf("%#v", this.BufferSize)+",\n")
	s = append(s, "SampleRate: "+fmt.Sprintf("%#v", this.SampleRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if m.HttpRequestTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.HttpRequestTimeout))
	}
	if m.BufferSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.BufferSize))
	}
	if m.SampleRate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.SampleRate))
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.HttpRequestTimeout != 0 {
		n += 1 + sovConfig(uint64(m.HttpRequestTimeout))
	}
	if m.BufferSize != 0 {
		n += 1 + sovConfig(uint64(m.BufferSize))
	}
	if m.SampleRate != 0 {
		n += 1 + sovConfig(uint64(m.SampleRate))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`HttpRequestTimeout:` + fmt.Sprintf("%v", this.HttpRequestTimeout) + `,`,
		`BufferSize:` + fmt.Sprintf("%v", this.BufferSize) + `,`,
		`SampleRate:` + fmt.Sprintf("%v", this.SampleRate) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRequestTimeout", wireType)
			}
			m.HttpRequestTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpRequestTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
			}
			m.BufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			m.SampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfig
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)
